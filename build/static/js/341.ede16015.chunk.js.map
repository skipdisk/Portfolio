{"version":3,"file":"static/js/341.ede16015.chunk.js","mappings":"+LA8GA,IA1FiB,SAAH,GASqB,IARjCA,EAAgB,EAAhBA,iBAAiB,EAAD,EAChBC,UAAAA,OAAS,MAAG,IAAG,MACfC,UAAAA,OAAS,MAAG,IAAG,MACfC,eAAAA,OAAc,MAAG,KAAK,MACtBC,kBAAAA,OAAiB,MAAG,EAAC,MACrBC,SAAAA,OAAQ,MAAG,aAAY,MACvBC,SAAAA,OAAQ,OAAQ,MAChBC,MAAAA,OAAK,MAAG,UAAS,EAEXC,GAAUC,EAAAA,EAAAA,QAAsB,MAChCC,GAAYC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIC,EAAAA,OAAS,GAAE,IA+D/C,OA5DAC,EAAAA,EAAAA,YAAU,WACR,GAAKR,EAAL,CAOA,IAJA,IAGIS,EAAaC,EAAWC,EAAWC,EAHjCC,EAAM,IAAIC,EAAAA,EAAId,GAEde,EAAyBC,KAAKC,MAAM,GAAK,IAEtCC,EAAM,EAAGA,EAAMtB,EAAWsB,IACjC,IAAK,IAAIC,EAAM,EAAGA,EAAMtB,EAAWsB,IACjCV,EAAcS,EAAMrB,EAAYsB,EAChCT,EAAYQ,GAAOtB,EAAY,GAC/Be,EAAYQ,GAAOtB,EAAY,GAC/Be,EACEI,KAAKC,MAAMP,EAAY,GAAKC,EAAY,IAAOI,EACjDZ,EAAQiB,QAAQC,WAAWZ,EAAaI,EAAIS,SAASV,IAGzDT,EAAQiB,QAAQG,cAAeC,aAAc,CAf7C,CAgBF,KAEAC,EAAAA,EAAAA,IAAS,YAOP,IAPuB,IAMnBhB,EAAaC,EAAWC,EAAWe,EAAGC,EAAGC,EAJvCC,EAFS,EAALC,MAEmBC,iBACvBC,EAAYpC,EAAYG,EAAoBD,EAC5CmC,EAAYpC,EAAYE,EAAoBD,EAC5CoC,EAAapC,EAAiBH,EAAiBwC,UAE5CjB,EAAM,EAAGA,EAAMtB,EAAWsB,IACjC,IAAK,IAAIC,EAAM,EAAGA,EAAMtB,EAAWsB,IACjCV,EAAcS,EAAMrB,EAAYsB,EAChCT,EAAYQ,GAAOtB,EAAY,GAC/Be,EAAYQ,GAAOtB,EAAY,GAC/B+B,EAAIjC,EAAiByC,IACnBC,EAAAA,GAAAA,aACA3B,EACAC,EACA,EACAkB,GAEFH,EAAIM,GAAatB,EAAY,IAC7BiB,EAAIM,GAAatB,EAAY,IAEzBV,GAEFI,EAAUiC,YAAYZ,EAAGC,GAAIO,EAAaN,GAAK,GAC/CvB,EAAUkC,SAAS,KAAOL,EAAaN,GAAK9B,GAG5CO,EAAUiC,YAAYZ,EAAGC,EAAGC,GAG9BzB,EAAQiB,QAAQoB,YAAY/B,EAAaJ,GAK7CF,EAAQiB,QAAQqB,eAAgBjB,aAAc,CAChD,KAGE,2BACEkB,IAAKvC,EACLwC,YAAY,EACZC,eAAe,EACfC,KAAM,CAAC,IAAIC,EAAAA,YAAe,IAAIC,EAAAA,kBAAqBnD,EAAYC,GAAW,WAE1E,wBACEmD,OAAO,WACPH,KAAM,CAAC/C,EAAgBA,EAAgBA,EAAgB,MAEzD,8BAAmBkD,OAAO,WAAW9C,MAAOA,EAAO+C,YAAY,MAGrE,C,mFCtDA,UAhDmB,SAAH,GAAwD,IAAlDtD,EAAgB,EAAhBA,iBACpB,GACEuD,EAAAA,EAAAA,IAAY,CACV,iBAAiBC,EAAAA,EAAAA,IACf,CACEvD,UAAW,CACTwD,MAAO,IACPC,IAAK,EACLC,IAAK,IACLC,KAAM,GAER1D,UAAW,CACTuD,MAAO,IACPC,IAAK,EACLC,IAAK,IACLC,KAAM,GAERC,mBAAoB,CAClBJ,MAAO,KACPC,IAAK,IACLC,IAAK,GACLC,KAAM,MAERE,sBAAuB,CACrBL,MAAO,EACPC,IAAK,EACLC,IAAK,GACLC,KAAM,KAGV,CAAEG,WAAW,MA7BX9D,EAAS,EAATA,UAAWC,EAAS,EAATA,UAAW2D,EAAkB,EAAlBA,mBAAoBC,EAAqB,EAArBA,sBAiClD,OACE,iCACE,SAAC,IAAQ,CACP9D,iBAAkBA,EAClBC,UAAWA,EACXC,UAAWA,EACXC,eAAgB0D,EAChBzD,kBAAmB0D,KAErB,SAAC,IAAM,CAACE,SAAU,IAAIC,EAAAA,QAAQ,EAAG,GAAI,IAAMjE,EAAiBwC,eAGlE,C,yFC/CMrB,EAAG,WAEP,WAAa+C,GAAuB,IAAbC,EAAQ,UAAH,6CAAG,IAAE,eAEjCC,KAAKC,OAAQ,EAEbD,KAAKlD,IAAM,GACXkD,KAAK3B,IAAM,GACX2B,KAAKE,EAAI,EACTF,KAAKG,KAAO,EACZH,KAAKI,KAAO,EAEZJ,KAAKK,YAAaP,EAAUC,EAE7B,CA0KC,OA1KA,2BAED,SAAKV,GAQJ,OANqB,IAAhBA,EAAMY,OAEVD,KAAKM,KAAMjB,GAILW,IAER,GAAC,oBAED,SAAQV,GAIP,OAFAU,KAAKG,KAAOb,EAELU,IAER,GAAC,oBAED,SAAQT,GAIP,OAFAS,KAAKI,KAAOb,EAELS,IAER,GAAC,yBAED,SAAaF,GAAuB,IAAbC,EAAQ,UAAH,6CAAG,GAE9BC,KAAK3B,IAAMkC,EAAkBT,IAAcS,EAAiBC,QAC5DR,KAAKE,EAAIH,EAET,IAAMP,EAAO,EAAMQ,KAAKE,EAClBO,EAAW,IAAIC,EAAAA,MACfC,EAAW,IAAID,EAAAA,MAErBV,KAAKlD,IAAI8D,OAAS,EAIlBZ,KAAKlD,IAAI+D,KAAM,IAAIH,EAAAA,MAAOV,KAAK3B,IAAK,GAAK,KAIzC,IAAM,IAAIyC,EAAI,EAAGA,EAAIf,EAAOe,IAI3B,IAFA,IAAMC,EAAQD,EAAItB,EAERwB,EAAI,EAAGA,EAAIhB,KAAK3B,IAAIuC,OAAS,EAAGI,IAEzC,GAAKD,EAAQf,KAAK3B,IAAK2C,GAAK,IAAOD,GAASf,KAAK3B,IAAK2C,EAAI,GAAK,GAAM,CAEpE,IAAM1B,EAAMU,KAAK3B,IAAK2C,GAAK,GACrBzB,EAAMS,KAAK3B,IAAK2C,EAAI,GAAK,GAE/BP,EAASQ,IAAKjB,KAAK3B,IAAK2C,GAAK,IAC7BL,EAASM,IAAKjB,KAAK3B,IAAK2C,EAAI,GAAK,IAEjC,IAAM7E,GAAQ,IAAIuE,EAAAA,OAAQQ,WAAYT,EAAUE,GAAYI,EAAQzB,IAAUC,EAAMD,IAEpFU,KAAKlD,IAAI+D,KAAM1E,EAEhB,CAUF,OAFA6D,KAAKlD,IAAI+D,KAAM,IAAIH,EAAAA,MAAOV,KAAK3B,IAAK2B,KAAK3B,IAAIuC,OAAS,GAAK,KAEpDZ,IAER,GAAC,kBAED,SAAMlD,GAQL,OANAkD,KAAKlD,IAAMA,EAAIA,IACfkD,KAAK3B,IAAMvB,EAAIuB,IACf2B,KAAKE,EAAIpD,EAAIoD,EACbF,KAAKG,KAAOrD,EAAIqD,KAChBH,KAAKI,KAAOtD,EAAIsD,KAETJ,IAER,GAAC,sBAED,SAAUe,GAITA,IAFAA,EAAQI,EAAAA,UAAAA,MAAiBJ,EAAOf,KAAKG,KAAMH,KAAKI,OAE9BJ,KAAKG,OAAWH,KAAKI,KAAOJ,KAAKG,MAEnD,IAAMiB,EAAgBnE,KAAKoE,MAAON,EAAQf,KAAKE,GAE/C,OAAOF,KAAKlD,IAAKsE,EAElB,GAAC,yBAED,SAAaE,EAAMC,GAIlB,OAFAhB,EAAkBe,GAASC,EAEpBvB,IAER,GAAC,0BAED,WAEC,IAAMwB,EAASC,SAASC,cAAe,UAMvC,OALAF,EAAOG,MAAQ,EACfH,EAAOI,OAAS5B,KAAKE,EAErBF,KAAK6B,aAAcL,GAEZA,CAER,GAAC,0BAED,SAAcA,GAgBb,IAdA,IAAMM,EAAMN,EAAOO,WAAY,KAAM,CAAEhB,OAAO,IAExCiB,EAAYF,EAAIG,aAAc,EAAG,EAAG,EAAGjC,KAAKE,GAE5CgC,EAAOF,EAAUE,KAEnBC,EAAI,EAEF3C,EAAO,EAAMQ,KAAKE,EAElBO,EAAW,IAAIC,EAAAA,MACfC,EAAW,IAAID,EAAAA,MACf0B,EAAa,IAAI1B,EAAAA,MAEbI,EAAI,EAAGA,GAAK,EAAGA,GAAKtB,EAE7B,IAAM,IAAIwB,EAAIhB,KAAK3B,IAAIuC,OAAS,EAAGI,GAAK,EAAGA,IAE1C,GAAKF,EAAId,KAAK3B,IAAK2C,GAAK,IAAOF,GAAKd,KAAK3B,IAAK2C,EAAI,GAAK,GAAM,CAE5D,IAAM1B,EAAMU,KAAK3B,IAAK2C,EAAI,GAAK,GACzBzB,EAAMS,KAAK3B,IAAK2C,GAAK,GAE3BP,EAASQ,IAAKjB,KAAK3B,IAAK2C,EAAI,GAAK,IACjCL,EAASM,IAAKjB,KAAK3B,IAAK2C,GAAK,IAE7BoB,EAAWlB,WAAYT,EAAUE,GAAYG,EAAIxB,IAAUC,EAAMD,IAEjE4C,EAAU,EAAJC,GAAUlF,KAAKoE,MAAsB,IAAfe,EAAWC,GACvCH,EAAU,EAAJC,EAAQ,GAAMlF,KAAKoE,MAAsB,IAAfe,EAAWE,GAC3CJ,EAAU,EAAJC,EAAQ,GAAMlF,KAAKoE,MAAsB,IAAfe,EAAWG,GAC3CL,EAAU,EAAJC,EAAQ,GAAM,IAEpBA,GAAK,CAEN,CAQF,OAFAL,EAAIU,aAAcR,EAAW,EAAG,GAEzBR,CAER,KAAC,EAxLO,GA4LHjB,EAAmB,CAExB,QAAW,CAAC,CAAE,EAAK,KAAY,CAAE,GAAK,OAAY,CAAE,GAAK,OAAY,CAAE,GAAK,UAAY,CAAE,EAAK,WAC/F,WAAc,CAAC,CAAE,EAAK,SAAY,CAAE,GAAK,UAAY,CAAE,GAAK,UAAY,CAAE,GAAK,UAAY,CAAE,EAAK,WAClG,UAAa,CAAC,CAAE,EAAK,GAAY,CAAE,GAAK,SAAY,CAAE,GAAK,UAAY,CAAE,GAAK,UAAY,CAAE,EAAK,WACjG,UAAa,CAAC,CAAE,EAAK,GAAY,CAAE,GAAK,SAAY,CAAE,GAAK,SAAY,CAAE,GAAK,UAAY,CAAE,EAAK,W","sources":["visualizer/components/visualizers/grid/base.tsx","visualizer/components/visualizers/grid/reactive.tsx","../node_modules/three/examples/jsm/math/Lut.js"],"sourcesContent":["import { useRef, useEffect, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Lut } from \"three/examples/jsm/math/Lut.js\";\nimport { BoxGeometry, InstancedMesh, Matrix4, MeshBasicMaterial } from \"three\";\nimport {\n  COORDINATE_TYPE,\n  ICoordinateMapper,\n} from \"../../coordinateMappers/common\";\n\ninterface BaseGridProps {\n  coordinateMapper: ICoordinateMapper;\n  nGridRows?: number;\n  nGridCols?: number;\n  cubeSideLength?: number;\n  cubeSpacingScalar?: number;\n  colorLut?: string;\n  pinStyle?: boolean;\n  color?: string;\n}\n\nconst BaseGrid = ({\n  coordinateMapper,\n  nGridRows = 100,\n  nGridCols = 100,\n  cubeSideLength = 0.025,\n  cubeSpacingScalar = 5,\n  colorLut = \"cooltowarm\",\n  pinStyle = false,\n  color = \"#670092\",\n}: BaseGridProps): JSX.Element => {\n  const meshRef = useRef<InstancedMesh>(null!);\n  const tmpMatrix = useMemo(() => new Matrix4(), []);\n\n  // Recolor\n  useEffect(() => {\n    if (!colorLut) {\n      return;\n    }\n    const lut = new Lut(colorLut);\n\n    const normQuadrantHypotenuse = Math.hypot(0.5, 0.5);\n    let instanceIdx, normGridX, normGridY, normRadialOffset;\n    for (let row = 0; row < nGridRows; row++) {\n      for (let col = 0; col < nGridCols; col++) {\n        instanceIdx = row * nGridCols + col;\n        normGridX = row / (nGridRows - 1);\n        normGridY = col / (nGridCols - 1);\n        normRadialOffset =\n          Math.hypot(normGridX - 0.5, normGridY - 0.5) / normQuadrantHypotenuse;\n        meshRef.current.setColorAt(instanceIdx, lut.getColor(normRadialOffset));\n      }\n    }\n    meshRef.current.instanceColor!.needsUpdate = true;\n  });\n\n  useFrame(({ clock }) => {\n    //in ms\n    const elapsedTimeSec = clock.getElapsedTime();\n    const gridSizeX = nGridRows * cubeSpacingScalar * cubeSideLength;\n    const gridSizeY = nGridCols * cubeSpacingScalar * cubeSideLength;\n    const baseHeight = cubeSideLength + coordinateMapper.amplitude;\n    let instanceIdx, normGridX, normGridY, x, y, z;\n    for (let row = 0; row < nGridRows; row++) {\n      for (let col = 0; col < nGridCols; col++) {\n        instanceIdx = row * nGridCols + col;\n        normGridX = row / (nGridRows - 1);\n        normGridY = col / (nGridCols - 1);\n        z = coordinateMapper.map(\n          COORDINATE_TYPE.CARTESIAN_2D,\n          normGridX,\n          normGridY,\n          0,\n          elapsedTimeSec\n        );\n        x = gridSizeX * (normGridX - 0.5);\n        y = gridSizeY * (normGridY - 0.5);\n\n        if (pinStyle) {\n          // adjust the position and z-scale of each cube\n          tmpMatrix.setPosition(x, y, (baseHeight + z) / 2);\n          tmpMatrix.elements[10] = (baseHeight + z) / cubeSideLength;\n        } else {\n          // adjust position of each cube\n          tmpMatrix.setPosition(x, y, z);\n        }\n\n        meshRef.current.setMatrixAt(instanceIdx, tmpMatrix);\n      }\n    }\n\n    // Update the instance\n    meshRef.current.instanceMatrix!.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh\n      ref={meshRef}\n      castShadow={true}\n      receiveShadow={true}\n      args={[new BoxGeometry(), new MeshBasicMaterial(), nGridRows * nGridCols]}\n    >\n      <boxGeometry\n        attach=\"geometry\"\n        args={[cubeSideLength, cubeSideLength, cubeSideLength, 1]}\n      />\n      <meshPhongMaterial attach=\"material\" color={color} toneMapped={false} />\n    </instancedMesh>\n  );\n};\n\nexport default BaseGrid;\n","import { folder, useControls } from \"leva\";\nimport { Vector3 } from \"three\";\nimport Ground from \"../../ground\";\nimport BaseGrid from \"./base\";\nimport { VisualProps } from \"../common\";\n\nconst GridVisual = ({ coordinateMapper }: VisualProps): JSX.Element => {\n  const { nGridRows, nGridCols, gridUnitSideLength, gridUnitSpacingScalar } =\n    useControls({\n      \"Visual - Grid\": folder(\n        {\n          nGridRows: {\n            value: 100,\n            min: 2,\n            max: 500,\n            step: 1,\n          },\n          nGridCols: {\n            value: 100,\n            min: 2,\n            max: 500,\n            step: 1,\n          },\n          gridUnitSideLength: {\n            value: 0.025,\n            min: 0.01,\n            max: 0.5,\n            step: 0.005,\n          },\n          gridUnitSpacingScalar: {\n            value: 5,\n            min: 1,\n            max: 10,\n            step: 0.5,\n          },\n        },\n        { collapsed: true }\n      ),\n    });\n\n  return (\n    <>\n      <BaseGrid\n        coordinateMapper={coordinateMapper}\n        nGridRows={nGridRows}\n        nGridCols={nGridCols}\n        cubeSideLength={gridUnitSideLength}\n        cubeSpacingScalar={gridUnitSpacingScalar}\n      />\n      <Ground position={new Vector3(0, 0, -2.5 * coordinateMapper.amplitude)} />\n    </>\n  );\n};\n\nexport default GridVisual;\n","import {\n\tColor,\n\tMathUtils\n} from 'three';\n\nclass Lut {\n\n \tconstructor( colormap, count = 32 ) {\n\n\t\tthis.isLut = true;\n\n\t\tthis.lut = [];\n\t\tthis.map = [];\n\t\tthis.n = 0;\n\t\tthis.minV = 0;\n\t\tthis.maxV = 1;\n\n\t\tthis.setColorMap( colormap, count );\n\n\t}\n\n\tset( value ) {\n\n\t\tif ( value.isLut === true ) {\n\n\t\t\tthis.copy( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetMin( min ) {\n\n\t\tthis.minV = min;\n\n\t\treturn this;\n\n\t}\n\n\tsetMax( max ) {\n\n\t\tthis.maxV = max;\n\n\t\treturn this;\n\n\t}\n\n\tsetColorMap( colormap, count = 32 ) {\n\n\t\tthis.map = ColorMapKeywords[ colormap ] || ColorMapKeywords.rainbow;\n\t\tthis.n = count;\n\n\t\tconst step = 1.0 / this.n;\n\t\tconst minColor = new Color();\n\t\tconst maxColor = new Color();\n\n\t\tthis.lut.length = 0;\n\n\t\t// sample at 0\n\n\t\tthis.lut.push( new Color( this.map[ 0 ][ 1 ] ) );\n\n\t\t// sample at 1/n, ..., (n-1)/n\n\n\t\tfor ( let i = 1; i < count; i ++ ) {\n\n\t\t\tconst alpha = i * step;\n\n\t\t\tfor ( let j = 0; j < this.map.length - 1; j ++ ) {\n\n\t\t\t\tif ( alpha > this.map[ j ][ 0 ] && alpha <= this.map[ j + 1 ][ 0 ] ) {\n\n\t\t\t\t\tconst min = this.map[ j ][ 0 ];\n\t\t\t\t\tconst max = this.map[ j + 1 ][ 0 ];\n\n\t\t\t\t\tminColor.set( this.map[ j ][ 1 ] );\n\t\t\t\t\tmaxColor.set( this.map[ j + 1 ][ 1 ] );\n\n\t\t\t\t\tconst color = new Color().lerpColors( minColor, maxColor, ( alpha - min ) / ( max - min ) );\n\n\t\t\t\t\tthis.lut.push( color );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// sample at 1\n\n\t\tthis.lut.push( new Color( this.map[ this.map.length - 1 ][ 1 ] ) );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( lut ) {\n\n\t\tthis.lut = lut.lut;\n\t\tthis.map = lut.map;\n\t\tthis.n = lut.n;\n\t\tthis.minV = lut.minV;\n\t\tthis.maxV = lut.maxV;\n\n\t\treturn this;\n\n\t}\n\n\tgetColor( alpha ) {\n\n\t\talpha = MathUtils.clamp( alpha, this.minV, this.maxV );\n\n\t\talpha = ( alpha - this.minV ) / ( this.maxV - this.minV );\n\n\t\tconst colorPosition = Math.round( alpha * this.n );\n\n\t\treturn this.lut[ colorPosition ];\n\n\t}\n\n\taddColorMap( name, arrayOfColors ) {\n\n\t\tColorMapKeywords[ name ] = arrayOfColors;\n\n\t\treturn this;\n\n\t}\n\n\tcreateCanvas() {\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = 1;\n\t\tcanvas.height = this.n;\n\n\t\tthis.updateCanvas( canvas );\n\n\t\treturn canvas;\n\n\t}\n\n\tupdateCanvas( canvas ) {\n\n\t\tconst ctx = canvas.getContext( '2d', { alpha: false } );\n\n\t\tconst imageData = ctx.getImageData( 0, 0, 1, this.n );\n\n\t\tconst data = imageData.data;\n\n\t\tlet k = 0;\n\n\t\tconst step = 1.0 / this.n;\n\n\t\tconst minColor = new Color();\n\t\tconst maxColor = new Color();\n\t\tconst finalColor = new Color();\n\n\t\tfor ( let i = 1; i >= 0; i -= step ) {\n\n\t\t\tfor ( let j = this.map.length - 1; j >= 0; j -- ) {\n\n\t\t\t\tif ( i < this.map[ j ][ 0 ] && i >= this.map[ j - 1 ][ 0 ] ) {\n\n\t\t\t\t\tconst min = this.map[ j - 1 ][ 0 ];\n\t\t\t\t\tconst max = this.map[ j ][ 0 ];\n\n\t\t\t\t\tminColor.set( this.map[ j - 1 ][ 1 ] );\n\t\t\t\t\tmaxColor.set( this.map[ j ][ 1 ] );\n\n\t\t\t\t\tfinalColor.lerpColors( minColor, maxColor, ( i - min ) / ( max - min ) );\n\n\t\t\t\t\tdata[ k * 4 ] = Math.round( finalColor.r * 255 );\n\t\t\t\t\tdata[ k * 4 + 1 ] = Math.round( finalColor.g * 255 );\n\t\t\t\t\tdata[ k * 4 + 2 ] = Math.round( finalColor.b * 255 );\n\t\t\t\t\tdata[ k * 4 + 3 ] = 255;\n\n\t\t\t\t\tk += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tctx.putImageData( imageData, 0, 0 );\n\n\t\treturn canvas;\n\n\t}\n\n}\n\nconst ColorMapKeywords = {\n\n\t'rainbow': [[ 0.0, 0x0000FF ], [ 0.2, 0x00FFFF ], [ 0.5, 0x00FF00 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFF0000 ]],\n\t'cooltowarm': [[ 0.0, 0x3C4EC2 ], [ 0.2, 0x9BBCFF ], [ 0.5, 0xDCDCDC ], [ 0.8, 0xF6A385 ], [ 1.0, 0xB40426 ]],\n\t'blackbody': [[ 0.0, 0x000000 ], [ 0.2, 0x780000 ], [ 0.5, 0xE63200 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFFFFFF ]],\n\t'grayscale': [[ 0.0, 0x000000 ], [ 0.2, 0x404040 ], [ 0.5, 0x7F7F80 ], [ 0.8, 0xBFBFBF ], [ 1.0, 0xFFFFFF ]]\n\n};\n\nexport { Lut, ColorMapKeywords };\n"],"names":["coordinateMapper","nGridRows","nGridCols","cubeSideLength","cubeSpacingScalar","colorLut","pinStyle","color","meshRef","useRef","tmpMatrix","useMemo","Matrix4","useEffect","instanceIdx","normGridX","normGridY","normRadialOffset","lut","Lut","normQuadrantHypotenuse","Math","hypot","row","col","current","setColorAt","getColor","instanceColor","needsUpdate","useFrame","x","y","z","elapsedTimeSec","clock","getElapsedTime","gridSizeX","gridSizeY","baseHeight","amplitude","map","COORDINATE_TYPE","setPosition","elements","setMatrixAt","instanceMatrix","ref","castShadow","receiveShadow","args","BoxGeometry","MeshBasicMaterial","attach","toneMapped","useControls","folder","value","min","max","step","gridUnitSideLength","gridUnitSpacingScalar","collapsed","position","Vector3","colormap","count","this","isLut","n","minV","maxV","setColorMap","copy","ColorMapKeywords","rainbow","minColor","Color","maxColor","length","push","i","alpha","j","set","lerpColors","MathUtils","colorPosition","round","name","arrayOfColors","canvas","document","createElement","width","height","updateCanvas","ctx","getContext","imageData","getImageData","data","k","finalColor","r","g","b","putImageData"],"sourceRoot":""}