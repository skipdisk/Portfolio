{"version":3,"file":"static/js/111.ccf6f91c.chunk.js","mappings":"4OAoBMA,EAAiB,SAAjBA,IAGJ,IAFA,IAAIC,EAAI,EACNC,EAAI,EACO,IAAND,GACLA,EAAIE,KAAKC,SAEX,KAAa,IAANF,GACLA,EAAIC,KAAKC,SAEX,IAAMC,EACHF,KAAKG,MAAM,EAAMH,KAAKI,IAAIN,IAAME,KAAKK,IAAIC,EAAAA,GAASP,GAAM,GAAO,GAClE,OAAIG,EAAM,GAAKA,EAAM,EACZL,IAEFK,CACT,EAwDA,EAtDyB,SAAH,GAKqB,IAJzCK,EAAgB,EAAhBA,iBAAiB,EAAD,EAChBC,OAAAA,OAAM,MAAG,EAAG,MACZC,UAAAA,OAAS,MAAG,GAAG,MACfC,QAAAA,OAAO,MAAG,IAAI,EAERC,GAAQ,OAAIC,MAAMF,IAAUG,IAAIhB,GAChCiB,GAAYC,EAAAA,EAAAA,QAAe,MAgCjC,OA9BAC,EAAAA,EAAAA,IAAS,YAKP,IALuB,IAGnBC,EAAiBC,EAASC,EADxBC,EAFS,EAALC,MAEmBC,iBAEvBC,EAAkBT,EAAUU,QAAQC,SAASC,WAAWC,SACrDC,EAAI,EAAGA,EAAIlB,EAASkB,IAE3BT,GADAD,EAAUU,GAAKlB,EAAU,IACNJ,EAAAA,GACnBW,EACET,GACC,EACCG,EAAMiB,GACJrB,EAAiBM,IACfgB,EAAAA,GAAAA,aACAX,EACA,EACA,EACAE,IAGRG,EAAgBO,OACdF,EACAX,EAAkBjB,KAAKK,IAAIc,GAC3BF,EAAkBjB,KAAK+B,IAAIZ,GAC3B,GAGJI,EAAgBS,aAAc,CAChC,KAGE,oBAAQC,IAAKnB,EAAU,WACrB,qCACE,4BACEoB,OAAO,sBACPC,MAAO,IAAIC,aAAuB,EAAV1B,GACxB2B,MAAO3B,EACP4B,SAAU,OAGd,2BAAgBJ,OAAO,WAAWK,KAAM9B,MAG9C,E,oBC5DA,EAvB2B,SAAH,GAAwD,IAAlDF,EAAgB,EAAhBA,iBAC5B,GAA8BiC,EAAAA,EAAAA,IAAY,CACxC,iBAAiBC,EAAAA,EAAAA,IACf,CACEjC,OAAQ,CAAEkC,MAAO,EAAGC,IAAK,IAAMC,IAAK,EAAGC,KAAM,KAC7CpC,UAAW,CAAEiC,MAAO,GAAKC,IAAK,IAAMC,IAAK,EAAGC,KAAM,MAEpD,CAAEC,WAAW,MANTtC,EAAM,EAANA,OAAQC,EAAS,EAATA,UAUhB,OACE,iCACE,SAAC,EAAgB,CACfF,iBAAkBA,EAClBC,OAAQA,EACRC,UAAWA,KAEb,SAAC,IAAM,CAACkB,SAAU,IAAIoB,EAAAA,QAAQ,EAAG,GAAI,IAAMxC,EAAiByC,eAGlE,C","sources":["visualizer/components/visualizers/diffusedRing/base.tsx","visualizer/components/visualizers/diffusedRing/reactive.tsx"],"sourcesContent":["import { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Points } from \"three\";\nimport {\n  COORDINATE_TYPE,\n  ICoordinateMapper,\n  TWO_PI,\n} from \"../../coordinateMappers/common\";\n\ninterface BaseDiffusedRingProps {\n  coordinateMapper: ICoordinateMapper;\n  radius?: number;\n  nPoints?: number;\n  pointSize?: number;\n}\n\n/**\n * Generates random numbers from a normalized gaussian distribution.\n * @returns - a random normalized value from a gaussian distribution.\n */\nconst gaussianRandom = (): number => {\n  let u = 0,\n    v = 0;\n  while (u === 0) {\n    u = Math.random(); //Converting [0,1) to (0,1)\n  }\n  while (v === 0) {\n    v = Math.random();\n  }\n  const num =\n    (Math.sqrt(-2.0 * Math.log(u)) * Math.cos(TWO_PI * v)) / 10.0 + 0.5; // Translate to 0 -> 1\n  if (num > 1 || num < 0) {\n    return gaussianRandom(); // resample between 0 and 1\n  }\n  return num;\n};\n\nconst BaseDiffusedRing = ({\n  coordinateMapper,\n  radius = 2.0,\n  pointSize = 0.2,\n  nPoints = 1000,\n}: BaseDiffusedRingProps): JSX.Element => {\n  const noise = [...Array(nPoints)].map(gaussianRandom);\n  const refPoints = useRef<Points>(null!);\n\n  useFrame(({ clock }) => {\n    //in ms\n    const elapsedTimeSec = clock.getElapsedTime();\n    let effectiveRadius, angNorm, angRad;\n    const positionsBuffer = refPoints.current.geometry.attributes.position;\n    for (let i = 0; i < nPoints; i++) {\n      angNorm = i / (nPoints - 1);\n      angRad = angNorm * TWO_PI;\n      effectiveRadius =\n        radius *\n        (1 +\n          noise[i] *\n            coordinateMapper.map(\n              COORDINATE_TYPE.CARTESIAN_1D,\n              angNorm,\n              0,\n              0,\n              elapsedTimeSec\n            ));\n\n      positionsBuffer.setXYZ(\n        i,\n        effectiveRadius * Math.cos(angRad), // x\n        effectiveRadius * Math.sin(angRad), // y\n        0 // z\n      );\n    }\n    positionsBuffer.needsUpdate = true;\n  });\n\n  return (\n    <points ref={refPoints}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          array={new Float32Array(nPoints * 3)}\n          count={nPoints}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial attach=\"material\" size={pointSize} />\n    </points>\n  );\n};\n\nexport default BaseDiffusedRing;\n","import { folder, useControls } from \"leva\";\nimport BaseDiffusedRing from \"./base\";\nimport Ground from \"../../ground\";\nimport { Vector3 } from \"three\";\nimport { VisualProps } from \"../common\";\n\nconst DiffusedRingVisual = ({ coordinateMapper }: VisualProps): JSX.Element => {\n  const { radius, pointSize } = useControls({\n    \"Visual - Ring\": folder(\n      {\n        radius: { value: 2, min: 0.25, max: 3, step: 0.25 },\n        pointSize: { value: 0.2, min: 0.01, max: 2, step: 0.01 },\n      },\n      { collapsed: true }\n    ),\n  });\n\n  return (\n    <>\n      <BaseDiffusedRing\n        coordinateMapper={coordinateMapper}\n        radius={radius}\n        pointSize={pointSize}\n      />\n      <Ground position={new Vector3(0, 0, -1.5 * coordinateMapper.amplitude)} />\n    </>\n  );\n};\n\nexport default DiffusedRingVisual;\n"],"names":["gaussianRandom","u","v","Math","random","num","sqrt","log","cos","TWO_PI","coordinateMapper","radius","pointSize","nPoints","noise","Array","map","refPoints","useRef","useFrame","effectiveRadius","angNorm","angRad","elapsedTimeSec","clock","getElapsedTime","positionsBuffer","current","geometry","attributes","position","i","COORDINATE_TYPE","setXYZ","sin","needsUpdate","ref","attach","array","Float32Array","count","itemSize","size","useControls","folder","value","min","max","step","collapsed","Vector3","amplitude"],"sourceRoot":""}